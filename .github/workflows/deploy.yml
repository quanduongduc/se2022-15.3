name: Deploy

on:
  push:
    branches:
      - "**" # for testing purposes only, the deployment will only be trigger on main branch
      - "main"

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_FRONTEND: frontend
  ECR_REPOSITORY_BACKEND: backend
  ECR_REPOSITORY_NGINX: nginx

permissions:
  contents: read

jobs:
  build:
    name: Build and Push images to Registry
    runs-on: ubuntu-latest

    outputs:
      backend-image: ${{ steps.build-backend-image.outputs.backend-image }}
      frontend-image: ${{ steps.build-frontend-image.outputs.frontend-image }}
      nginx-image: ${{ steps.build-nginx-image.outputs.nginx-image }}
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "no"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build and push backend image
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          imagename=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "Build and push $imagename"
          docker build -t $imagename ./backend
          docker push $imagename
          echo "backend-image=$imagename" >> $GITHUB_OUTPUT

      - name: build and push frontend image
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          imagename=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "Build and push $imagename"
          docker build -t $imagename ./frontend
          docker push $imagename
          echo "frontend-image=$imagename" >> $GITHUB_OUTPUT

      - name: build and push nginx image
        id: build-nginx-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          imagename=$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
          echo "Build and push $imagename"
          docker build -t $imagename ./nginx
          docker push $imagename
          echo "nginx-image=$imagename" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: SSH in EC2 and deploy
        uses: appleboy/ssh-action@v0.1.6
        env:
          CLONE_URL: "git@github.com:${{ github.repository }}.git"
          BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
          FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}
          NGINX_IMAGE: ${{ needs.build.outputs.nginx-image }}
          ECR_REGISTRY: ${{ needs.build.outputs.ECR_REGISTRY }}
          PROJECT_NAME: "se2022-15.3"
        with:
          host: ${{ secrets.HOSTNAME }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          envs: CLONE_URL,BACKEND_IMAGE,FRONTEND_IMAGE,NGINX_IMAGE,PROJECT_NAME,ECR_REGISTRY
          script: |
            echo "-- Check Docker existence"
            docker --version
            if [  $? -eq 127 ]; then
              echo "Docker is not installed"
              echo "--- Install Docker ---"
              sudo snap install docker
            fi

            echo "-- Check git existence"
            git version

            if [ $? -eq 127 ]; then
                echo "Git is not installed"
                echo "--- Git Install ---"
                sudo apt -y install git
            fi
            echo "--- Update repo ---"

            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

            ! [ -d $HOME/projects ] && mkdir $HOME/projects
            if ! [ -d "$HOME/projects/$PROJECT_NAME" ]; then
              echo "--- Clone code from GitHub ---"
              cd $HOME/projects
              git clone -b deploy $CLONE_URL
              echo "--- Clone done! ---"
            else 
              cd $HOME/projects/$PROJECT_NAME
              git fetch --all
              git reset --hard origin/deploy
            fi
            echo "-- Check AWS CLI existence"
            aws --version
            if [ $? -eq 127 ]; then
                echo "AWS CLI is not installed"
                echo "--- AWS CLI Install ---"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                sudo apt install unzip
                unzip -o -q awscliv2.zip
                sudo ./aws/install
            fi

            echo "--- Load AWS Credentials ---"
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}
            echo ~/.aws/credentials

            echo "--- Docker Log in to AWS ---"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "--- Deployment with Docker Compose ---"
            cd $HOME/projects/$PROJECT_NAME
            echo -e "AWS_ECR_NGINX=$NGINX-IMAGE" >> .env
            echo -e "AWS_ECR_BACKEND=$BACKEND-IMAGE" >> .env
            echo -e "AWS_ECR_FRONTEND=$FRONTEND-IMAGE" >> .env

            sudo docker compose -f docker-compose.production.yml up -d
            echo "--- Clean up old docker images"
            sudo docker image prune -f -a
            echo "--- Deployment done! ---"
